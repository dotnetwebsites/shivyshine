@model Shade

@{   
    ViewData["Title"] = "Create";
    ViewData["PageTitle"] = "Create";
}

<div class="row">
    <div class="col-sm-12 col-md-12">
        <div class="panel panel-bd ">
            <div class="panel-body">
                <form enctype="multipart/form-data" method="POST">
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

                    <div class="form-group col-md-4">
                        @Html.Label("Brand")
                        @Html.DropDownList("BrandId", null, "--Select Brand--", htmlAttributes: new { @class = "form-control" })                        
                    </div>

                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.ProductId)
                        <select asp-for="ProductId" asp-items="@ViewBag.ProductId" class="form-control">
                            <option value="-1">Select Product</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                    </div>

                    @* <div class="form-group col-md-3">
                        @Html.LabelFor(model => model.ProductId)
                        @Html.DropDownList("ProductId", null, "--select Product--", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })                        
                    </div> *@

                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.ProductUnitId)
                        <select asp-for="ProductUnitId" class="form-control" asp-items="@ViewBag.ProductUnitId">
                            <option value="">Select Product Unit</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.ProductUnitId, "", new { @class = "text-danger" })
                    </div>
                    
                    @* <div class="form-group col-md-3">
                        @Html.LabelFor(model => model.ProductUnitId)
                        @Html.DropDownList("ProductUnitId", null, null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ProductUnitId, "", new { @class = "text-danger" })
                    </div> *@
                    
                    <div class="form-group col-md-3">
                        @Html.LabelFor(model => model.ShadeName)
                        @Html.EditorFor(model => model.ShadeName, new { htmlAttributes = new { @class = "form-control", @placeholder="Shade Name" } })
                        @Html.ValidationMessageFor(model => model.ShadeName, "", new { @class = "text-danger" })
                    </div>

                    @* <div class="row col-md-12">
                        <div class="form-group col-md-2">
                            <input type="text" id="txtShade" class="form-control colorPicker">
                            <button type="button" id="AddShades" class="btn btn-add">Add</button>
                        </div>                        
                        <div class="form-group col-md-9 divShades">

                        </div>
                    </div>

                    <div class="row col-md-12">
                        <div class="form-group col-md-6">
                            @Html.HiddenFor(model => model.ShadeColor,new {@id="hdnShades"})
                            @Html.ValidationMessageFor(model => model.ShadeColor, "", new { @class = "text-danger" })
                        </div>
                    </div> *@

                    <div class="form-group col-md-3">
                        @Html.LabelFor(model => model.ShadeColor)
                        @Html.EditorFor(model => model.ShadeColor, new { htmlAttributes = new { @class = "form-control colorPicker", @placeholder="Shade Color" } })
                        @Html.ValidationMessageFor(model => model.ShadeColor, "", new { @class = "text-danger" })                                    
                    </div>

                    <div class="form-group col-md-3">
                        @Html.LabelFor(model => model.GSTIN)
                        @Html.EditorFor(model => model.GSTIN, new { htmlAttributes = new { @class = "form-control", @placeholder="GST IN %" } })
                        @Html.ValidationMessageFor(model => model.GSTIN, "", new { @class = "text-danger" })                                    
                    </div>

                    <div class="form-group col-md-3">
                        @Html.LabelFor(model => model.MRP)
                        @Html.EditorFor(model => model.MRP, new { htmlAttributes = new { @class = "form-control", @placeholder="MRP" } })
                        @Html.ValidationMessageFor(model => model.MRP, "", new { @class = "text-danger" })                                    
                    </div>

                    <div class="form-group col-md-3">
                        @Html.LabelFor(model => model.DiscountInRs)
                        @Html.EditorFor(model => model.DiscountInRs, new { htmlAttributes = new { @class = "form-control", @placeholder="Discount in Rs", @onchange="" } })
                        @Html.ValidationMessageFor(model => model.DiscountInRs, "", new { @class = "text-danger" })                        
                    </div>

                    <div class="form-group col-md-3">
                        @Html.LabelFor(model => model.DiscountInPer)
                        @Html.EditorFor(model => model.DiscountInPer, new { htmlAttributes = new { @class = "form-control", @placeholder="Discount in Per" } })
                        @Html.ValidationMessageFor(model => model.DiscountInPer, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-12">
                        @Html.LabelFor(model => model.ShadesImages, htmlAttributes: new { @class = "control-label col-md-6" })
                        <div class="col-md-10 custom-file">
                            @Html.EditorFor(model => model.ShadesImages, new { htmlAttributes = new { @class = "custom-file-input" } })
                            <span class="custom-file-label" for="customFile">Choose file</span> 
                            @Html.ValidationMessageFor(model => model.ShadesImages, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-3">
                        @Html.LabelFor(model => model.IsActive)
                        @Html.CheckBoxFor(model => model.IsActive, new {@checked = "checked"})
                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-3">
                        @Html.LabelFor(model => model.IsVisiblePrice)
                        @Html.CheckBoxFor(model => model.IsVisiblePrice)
                        @Html.ValidationMessageFor(model => model.IsVisiblePrice, "", new { @class = "text-danger" })
                    </div>
                    
                    <div class="form-group col-md-12">
                        <a asp-area="Admin" asp-action="Index" class="btn btn-info">Back</a>
                        <button type="submit" onclick="return isValidate()" class="btn btn-primary">Create</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />  
    <script>
        $(document).ready(function () {
            $(".Master").addClass("active");

            $("#ProductId").change(function(){
                $("#ProductUnitId").empty();
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("ProductUnits")',
                    dataType:'json',
                    data:{id: $("#ProductId").val() },
                    success: function(data){
                        $("#ProductUnitId").append('<option value="-1">Select Sub Category</option>');

                        $.each(data, function(i, d){
                            $("#ProductUnitId").append('<option value="' + d.value +'">' + d.text + '</option>');
                        });
                    },
                    error: function(ex){
                        console.log(ex);
                    }
                });
            });
        });


        $(".colorPicker").ColorPickerSliders({
            placement: 'bottom',
            hsvpanel: true,
            previewformat: 'hex'
        });

        $(".custom-file-input").on("change", function () {  
            var fileName = $(this).val().split("\\").pop();  
            $(this).siblings(".custom-file-label").addClass("selected").html(fileName);  
        });

        function isValidate()
        {
            var val = $("#ProductId").val();
            if(val>0)
            return true;
            else {
                alert("Please select product and try again.")
                return false;
            }            
        }

        var arrShades = [];
        var shcnt = 0;

        $("#AddShades").click(function(){
            var sh = $("#txtShade").val();
              
            if(!arrShades.includes(sh)){
                arrShades.push(sh);
                //document.getElementById("hdnShades").innerHTML = arrShades;
                $("#hdnShades").val(arrShades);

                var txtShadeColor = $("#txtShade").css("color");
                
                $(".divShades").append('<button data-val="' + sh + '" id="btnShade_'+ shcnt++ + 
                    '" onclick="deleteShades(this.id);" type="button" style="background-color: ' + sh +
                    ';border: ' + txtShadeColor + ' 1px solid; margin: 5px;" class="btn btn-lg"><i class="fa fa-trash" style="color: ' + txtShadeColor + '"></i></button>');

            } else {
                alert('This color already added.');
            }

        });

        $("#BrandId").change(function(){
            $("#ProductId").empty();
            $.ajax({
                type: 'GET',
                url: '@Url.Action("LoadProducts")',
                dataType:'json',
                data:{id: $("#BrandId").val() },
                success: function(data){
                    $("#ProductId").append('<option value="-1">Select Product</option>');

                    $.each(data, function(i, d){
                        $("#ProductId").append('<option value="' + d.value +'">' + d.text + '</option>');
                    });
                },
                error: function(ex){
                    console.log(ex);
                }
            });
        });  

        function deleteShades(id){            
            var value = $("#" + id).data("val");
            
            removeItemOnce(arrShades, value)
            //document.getElementById("hdnShades").innerHTML = arrShades;
            $("#hdnShades").val(arrShades);
            $("#" + id).remove();
        }

        function removeItemOnce(arr, value) {
            var index = arr.indexOf(value);
            if (index > -1) {
                arr.splice(index, 1);
            }
            return arr;
        }
        
        function removeItemAll(arr, value) {
        var i = 0;
        while (i < arr.length) {
            if (arr[i] === value) {
            arr.splice(i, 1);
            } else {
            ++i;
            }
        }
        return arr;
        }
    </script>
}